import React, { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Particles from 'react-tsparticles';
import { loadStarsPreset } from 'tsparticles-preset-stars';
import { loadFull } from 'tsparticles';
import { AiFillGithub } from 'react-icons/ai';
import { useRouter } from 'next/router';
import { SubmitHandler, useForm } from 'react-hook-form';
import { GetServerSidePropsContext } from 'next';
import styles from '../styles/Auth.module.scss';
import AuthBox from '../components/AuthBox';
import Checkbox from '../components/Checkbox';
import { Google } from '../public';
import { fetchUser, userApiUrl } from '../components/utils';

type FormValues = { fullName: string; email: string; password: string };

const Login = (): JSX.Element => {
    const [signupOpen, setSignupOpen] = useState(false);
    const [acceptedDisclaimer, setAcceptedDisclaimer] = useState(false);
    const { register, handleSubmit } = useForm<FormValues>();
    const router = useRouter();

    const signup: SubmitHandler<FormValues> = data => {
        if (!acceptedDisclaimer) return;
        fetch(`${userApiUrl}/user`, {
            method: 'POST',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ...data }),
        })
            .then(async res => {
                if (res.status === 200) {
                    await router.push('/login');
                }
            })
            .catch(err => console.error(err));
    };

    return (
        <>
            <Head>
                <title>Galactic Nodes</title>
                <meta name={'description'} content={'Generated by create next app'} />
                <link rel={'icon'} href={'/favicon.ico'} />
            </Head>
            <main className={styles.main}>
                <div className={styles.mainSector}>
                    <Particles
                        style={{
                            position: 'absolute',
                            top: 0,
                            zIndex: 5,
                        }}
                        height={'100%'}
                        width={'100%'}
                        options={{
                            preset: 'stars',
                            background: { color: 'transparent' },
                            particles: {
                                number: {
                                    value: 350,
                                },
                                move: {
                                    speed: 0.4,
                                },
                            },
                            fullScreen: false,
                        }}
                        init={async engine => {
                            await loadStarsPreset(engine);
                            await loadFull(engine);
                        }}
                    />
                    <AuthBox>
                        <div className={styles.slides}>
                            <div style={{ marginLeft: signupOpen ? 'calc(-5.265rem - 320px)' : '0' }}>
                                <button type={'button'} className={styles.gnButton} onClick={() => setSignupOpen(true)}>
                                    Sign up
                                </button>
                                <a href={'/login/google'} className={styles.googleLogin}>
                                    <Image src={Google} />
                                    <p>Sign in with Google</p>
                                </a>
                                <a href={'/login/github'} className={styles.githubLogin}>
                                    <AiFillGithub />
                                    <p>Sign in with Github</p>
                                </a>
                            </div>
                            <form onSubmit={handleSubmit(signup)} style={{ height: signupOpen ? '100%' : '0' }} className={styles.slide2}>
                                <div>
                                    <label htmlFor={'fullName'}>
                                        <p>Full Name</p>
                                        <input id={'fullName'} {...register('fullName', { required: true })} type={'text'} />
                                    </label>
                                </div>
                                <div>
                                    <label htmlFor={'email'}>
                                        <p>Email</p>
                                        <input id={'email'} {...register('email', { required: true })} type={'email'} />
                                    </label>
                                </div>
                                <div>
                                    <label htmlFor={'password'}>
                                        <p>Password</p>
                                        <input id={'password'} {...register('password', { required: true })} type={'password'} />
                                    </label>
                                </div>
                                <div>
                                    <Checkbox
                                        defaultState={false}
                                        onChange={setAcceptedDisclaimer}
                                        label={'I agree to the Terms of Service and Privacy Policy'}
                                    />
                                </div>
                                <button className={styles.gnButton} type={'submit'}>
                                    Sign up
                                </button>
                                <h6 className={styles.accountQuestion}>
                                    Already have an account? <a href={'/login'}>Login</a>
                                </h6>
                                <button type={'button'} onClick={() => setSignupOpen(false)} className={styles.back}>
                                    <h5>Back</h5>
                                </button>
                            </form>
                        </div>
                    </AuthBox>
                    <div className={styles.loginBox} />
                </div>
            </main>
        </>
    );
};

export const getServerSideProps = async ({ req }: GetServerSidePropsContext) => {
    const user = await fetchUser(req.headers.cookie || '');
    if (user.data) {
        return {
            redirect: {
                destination: '/dashboard',
                permanent: false,
            },
        };
    }
    return {
        props: {},
    };
};

export default Login;
